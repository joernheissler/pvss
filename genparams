#!/usr/bin/python3.8

from hmac import digest
from groups import Qr, Zq
from sys import argv
from pvss import SystemParameters


def make_gen(grp: Qr, seed: str) -> int:
    """
    Deterministic pseudo-random function to generate a group element of grp.
    """
    key = seed.encode()
    bits = grp.p.bit_length()

    dig = b''
    tmp = bytearray()

    while len(tmp) * 8 < bits:
        dig = digest(key, dig, "sha256")
        tmp.extend(dig)

    # Square to get a quadratic residue
    value = int.from_bytes(tmp, "big") ** 2

    gen = grp(value)

    # We don't want the neutral element because it doesn't generate the group.
    if int(gen) == 1:
        raise ValueError("Bad seed")

    return gen


# 4096 bit safe prime, generated with "openssl dhparam -2 4096".
p = int(
    "D432BEEC4D98D3F0785526F9F054BF24273FBB0FCC33A37CA4BCFA21C9D13B7E"
    "7D05321707B9AF787BB0BB8224D031A628A833B996763C017949DA713E96BFE6"
    "58FFC22CD3F46C5A44A87D620D8C75F50DD192CAF879F296617DCA0AB5F04C24"
    "B11450998E572E8C51A975D46585B88543C55CFF7C532C6A0ACDF07EE9275E24"
    "306F0063DBBEC21EA53B8EAB1CFE5C0D122166D89ED3AF0F1E9D55D8B205BDED"
    "A698C9140DEC7DB18F21FB27C48765A5FB1B805ED31F5D87A2F543F4457DD88D"
    "DA847CD278A3524BFE5AD34953FE989A981B2C84742BAE6096BB8086C4DCBD97"
    "C6C08BE34AEAA75F4D8BBC2C43D73B8819EE80F1400177CB0A5EA8A4C7F96042"
    "AB7A8024317E84F585BC947CF6150B1AAA4FD0110C53139BBCC9C5EEDECC9D34"
    "D8AC04530A4B836790BDC48DB92C2E2C141EDD363974B37600D75AA0494DF2FD"
    "9C6434DDCDDD37C0F0238E7738A0B79566F4DF5D2122B00A945A7749C9C14117"
    "C762E1FF575EAD0E37F7F4947FBB8D12F43917A3BED22AE58FBEC269F1D5E448"
    "1B38A615277CEA96C469453DFFAA1F1AF40F6C8EAEA123C846B599398A9A66E0"
    "9FF983AD6D8E95CB83ECE8DC013818C88673358D31E377E7A2D1969A3D8E3FEB"
    "9EB167A77DE92BEA51320B9FDE979EF3B2ACFA265979765490E8F6262364648D"
    "2E6E6030E606AC1EB23DE7D0C9BE032D8919670269774572B380F604C3622983",
    16,
)
p = 0xEF301EC3

grp = Qr.load(p)

params = SystemParameters.create(
    group=grp.p,
    gen_g=make_gen(grp, "g"),
    gen_h=make_gen(grp, "h"),
    gen_G=make_gen(grp, "G"),
    gen_H=make_gen(grp, "H"),
)

with open(argv[1], "wb") as fp:
    fp.write(params.der)
